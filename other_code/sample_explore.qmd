---
title: "Analysis of potential sample size"
format: pdf
---

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(dbplyr)
library(RSQLite)
library(terra)
library(stars)
```

## Download FIA database locally

Only run once.  Future - make a regular cron job to download the csv files that can be hosted on s3 (then arrow can be used to access)

```{r}
#| eval: false
download.file("https://apps.fs.usda.gov/fia/datamart/Databases/SQLite_FIADB_ENTIRE.zip", 
              "SQLite_FIADB_ENTIRE.zip",
              method = "curl")
unzip("SQLite_FIADB_ENTIRE.zip")
```

## Connect to database

```{r}
fia_all <- DBI::dbConnect(RSQLite::SQLite(), "SQLite_FIADB_ENTIRE.db")
```

## Access tree table

```{r}
trees <- tbl(fia_all, "TREE")
```

## Analyze sample size

Read in the table of focal species from Mike Bell

```{r}
focal_species <- read_csv("focal_species.csv", show_col_types = FALSE)
```

Calculate the number of remeasurements for each unique tree in the database.

```{r}
focal_SPCD <- focal_species$SPCD
tree_stats <- trees |> 
  select(SUBP, TREE, PLOT, STATECD, SPCD, INVYR, DIA) |> 
  filter(SPCD %in% focal_SPCD,
         INVYR > 1995,
         DIA > 5.0,
         SUBP <= 4) |> 
  mutate(id = paste(STATECD, PLOT,SUBP,TREE, sep = "-")) |> 
  summarise(remeasures = n(), .by = c("id", "SPCD")) |> 
  filter(remeasures > 1 & remeasures < 10) |> 
  collect() 
```

## Remeasurements by species

This shows the max number of remeasurements per tree for the different species. 

```{r}
#| fig-width: 5
#| fig-height: 8
#| message: false
#| warning: false
tree_stats |> 
  left_join(focal_species, by = "SPCD") |> 
  ggplot(aes(x = remeasures)) +
  geom_histogram() +
  facet_wrap(~common_name, scales = "free", ncol = 2)
```
## Sample size by species

This table is the potential sample size per species.  It is the number of trees that have been remeasured.

```{r}
tree_stats |> 
  summarise(sample_size = n(), .by = "SPCD") |> 
  left_join(focal_species, by = "SPCD") |> 
  select(common_name,sample_size) |> 
  knitr::kable()
```

## Example trees

Here is a figure with sugar maples trees from a single plot in Virginia

```{r}
example_trees <- trees %>%
  filter(STATECD == 51, SPCD == 318, PLOT == 42, SUBP <= 4) |> 
  select(PLT_CN, SUBP, TREE, PLOT, STATECD, SPCD, CARBON_AG, INVYR, CYCLE, STATUSCD, CN, PREV_TRE_CN, DIA) |> 
  mutate(id = paste(STATECD,PLOT,SUBP,TREE, sep = "-")) |> 
  collect()

plot <- tbl(fia_all, "PLOT")
example_plot <- plot %>%
  filter(STATECD == 51, PLOT == 42) |> 
  select(CN, MEASYEAR, MEASMON, MEASDAY, REMPER, LAT, LON, ELEV, PLOT) |> 
  rename(PLT_CN = CN) |> 
  collect() 

example_trees <- left_join(example_trees, example_plot, by = "PLT_CN") 
```

```{r}
example_trees |> 
  filter(STATUSCD == 1,
         DIA > 5.0) |> 
ggplot(aes(x = MEASYEAR, y = CARBON_AG, color = factor(id))) +
  geom_point() +
  geom_line()
```

## Linking to Ndep

```{r}
n_dw_2000 <- rast("n_dw-2000/n_dw-2000.tif")
n_dw_2000
```
```{r}
summary(n_dw_2000)
```
```{r}
n_dw_2000_df <- as.data.frame(n_dw_2000, xy = TRUE)
```

```{r}
#| fig-width: 5
#| fig-height: 3
ggplot() +
    geom_raster(data = n_dw_2000_df , aes(x = x, y = y, fill = `n_dw-2000` )) +
    scale_fill_viridis_c() 
```
Get Ndep for each tree

```{r}
example_trees_sf <- example_trees |> 
  distinct(id, LON, LAT) |> 
  group_by(id) |> 
  slice(1) |> 
  ungroup() |> 
  rename(longitude = LON,
         latitude = LAT) |> 
  sf::st_as_sf(coords=c("longitude", "latitude"),
                           crs = 4326) |> 
  tibble::rowid_to_column("FID")

n_dw_2000 <- read_stars("n_dw-2000/n_dw-2000.tif")
sf_plots <- st_transform(example_trees_sf, st_crs(n_dw_2000))
plot_ndep = st_extract(n_dw_2000, sf_plots)

plot_each_tree <- as.data.frame(plot_ndep) |> 
  tibble::rowid_to_column("FID") |> 
  right_join(example_trees_sf, by = "FID") |> 
  rename(ndep = `n_dw-2000.tif`) |> 
  mutate(year = 2000) |> 
  select(id, year, ndep)
```